@page "/appointment/add"
@inject NavigationManager Navigation
@inject IObjService<AppointmentDTO, AppointmentCreateDTO, AppointmentUpdateDTO> AppointmentService
@inject IObjService<DoctorDTO, DoctorCreateDTO, DoctorUpdateDTO> DoctorService
@inject IObjService<PatientDTO, PatientCreateDTO, PatientUpdateDTO> PatientService

<link href="~/css/bootstrap/bootstrap.min.css" rel="stylesheet" />

<h2 class="mt-3 mb-3">Add Appointment</h2>

<EditForm Model="appointment" OnSubmit="HandleSubmit" FormName="AddAppointment">


    <div class="mb-3">
        <label for="dateTime" class="form-label">Date and Time</label>
        <InputDate id="dateTime" class="form-control" @bind-Value="appointment.DateTime" />
    </div>
    <div class="mb-3">
        <label for="type" class="form-label">Description</label>
        <InputText id="type" class="form-control" @bind-Value="appointment.Type" />
    </div>
    <div class="mb-3">
        <label for="doctorId" class="form-label">Doctor</label>
        <InputSelect id="doctorId" class="form-control" @bind-Value="appointment.DoctorId">
            <option value="">Select Doctor</option>
            @foreach (var doctor in doctors)
            {
                <option value="@doctor.Id">@doctor.Name</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="patientId" class="form-label">Patient</label>
        <InputSelect id="patientId" class="form-control" @bind-Value="appointment.PatientId">
            <option value="">Select Patient</option>
            @foreach (var patient in patients)
            {
                <option value="@patient.Id">@patient.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <a href="/appointment/get-all" class="btn btn-secondary">Cancel</a>
</EditForm>

@code {
    private AppointmentCreateDTO newAppointment = new AppointmentCreateDTO();
    private List<DoctorDTO> doctors = new List<Doctor>();
    private List<PatientDTO> patients = new List<Patient>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            DoctorService.SetEndpoint("doctor");
            doctors = await DoctorService.GetObjects();

            PatientService.SetEndpoint("patient");
            patients = await PatientService.GetObjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching doctors or patients: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await AppointmentService.CreateObject(appointment);
            Navigation.NavigateTo("/appointment/get-all");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating appointment: {ex.Message}");
        }
    }
}
