// <auto-generated />
using System;
using MedicalCenter.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenter.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240515210441_Seed2")]
    partial class Seed2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCenter.Core.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eba20ca4-6337-46e4-8760-c7f11c463474"),
                            DateTime = new DateTime(2024, 5, 17, 0, 4, 40, 394, DateTimeKind.Local).AddTicks(2611),
                            DoctorId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Type = "Проходження медогляду"
                        },
                        new
                        {
                            Id = new Guid("6487b67f-b219-4647-bc9a-86b3c2225851"),
                            DateTime = new DateTime(2024, 5, 18, 0, 4, 40, 394, DateTimeKind.Local).AddTicks(2721),
                            DoctorId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Type = "Біль у горлі"
                        },
                        new
                        {
                            Id = new Guid("f29cdd1f-093c-4652-a1af-a007124a4286"),
                            DateTime = new DateTime(2024, 5, 16, 5, 4, 40, 394, DateTimeKind.Local).AddTicks(2730),
                            DoctorId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Type = "Виписка з лікарняного"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50f6bbfe-1a2d-41ec-8c61-8b2ddb5066a2"),
                            CreatedOn = new DateTime(2024, 5, 16, 0, 4, 40, 394, DateTimeKind.Local).AddTicks(2969),
                            DoctorId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            MainText = "Чудова лікарка, виписала направлення на безкоштовні аналізи, експіріенс десять з десяти",
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Title = "Все супер"
                        },
                        new
                        {
                            Id = new Guid("adf337b7-a76a-4efa-824f-f40841c24e3d"),
                            CreatedOn = new DateTime(2024, 5, 16, 0, 4, 40, 394, DateTimeKind.Local).AddTicks(2990),
                            DoctorId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            MainText = "Жахливе ставлення, відмовила приймати мене без черги, а мені було просто спитать",
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Title = "Немає слів"
                        },
                        new
                        {
                            Id = new Guid("33acf093-708a-4eea-b330-68ca2f7b629c"),
                            CreatedOn = new DateTime(2024, 5, 16, 0, 4, 40, 394, DateTimeKind.Local).AddTicks(3009),
                            DoctorId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            MainText = "Назва коментаря вже все сказала за мене",
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Title = "Найкраща сімейна лікарка"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Perscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnosis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("102e4aa0-cd24-4db1-b213-b9389aceeb2a"),
                            Date = new DateOnly(2023, 4, 29),
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Perscription = "Чай з малиною 4 р. на день, постільний режим",
                            diagnosis = "Гострий бронхіт"
                        },
                        new
                        {
                            Id = new Guid("1e88e934-63c5-43fe-836a-4c1f7ffccfdf"),
                            Date = new DateOnly(2023, 8, 18),
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Perscription = "Чай з малиною 4 р. на день, постільний режим",
                            diagnosis = "Ларингіт"
                        },
                        new
                        {
                            Id = new Guid("6a3b2046-b43e-4700-9a2b-a0fac742527b"),
                            Date = new DateOnly(2024, 5, 8),
                            PatientId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            Perscription = "Адаптол 1 таб. 2 р. на день, Гліцисед 1 таб. 3 р. на день, сон мінімум 10 годин на день",
                            diagnosis = "Нервовий зрив"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            AccessFailedCount = 0,
                            Address = "Somewhere st, Ukraine",
                            Age = 28,
                            ConcurrencyStamp = "90cc67ae-2de2-43ff-bc58-e6416c81f27f",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            Email = "doctor@medcenter.babaka.page",
                            EmailConfirmed = true,
                            FullName = "Бабаєва Вікторія Вікторівна",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@MEDCENTER.BABAKA.PAGE",
                            NormalizedUserName = "DOCTOR@MEDCENTER.BABAKA.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJjPyXQCoZJwXq93c6uvYcLHGeo2U4HIeMK/C/y8QTyHhCykFueFMTXADtCoFL9Msw==",
                            PhoneNumberConfirmed = false,
                            Photo = "/Entities/images/cracked raiden shogun.jpg",
                            SecurityStamp = "31e798b9-e0fb-464f-8772-4cea1336ed6a",
                            TwoFactorEnabled = false,
                            UserName = "doctor@medcenter.babaka.page"
                        },
                        new
                        {
                            Id = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            AccessFailedCount = 0,
                            Address = "Somewhere st, Ukraine",
                            Age = 28,
                            ConcurrencyStamp = "e52fbb4a-d3ee-4df4-850b-72a096e44f13",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            Email = "patient@medcenter.babaka.page",
                            EmailConfirmed = true,
                            FullName = "Бабаєв Віктор Вікторієвич",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@MEDCENTER.BABAKA.PAGE",
                            NormalizedUserName = "PATIENT@MEDCENTER.BABAKA.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4bh6t+FyMeJGuSmCccMweyp4hLSJR96E/2Lnka4OFS8s8P703aQxVz/5ZmLM6dYg==",
                            PhoneNumberConfirmed = false,
                            Photo = "/Entities/images/Viktor.jpg",
                            SecurityStamp = "2f816470-f90f-402a-acf7-bb7d2643dc17",
                            TwoFactorEnabled = false,
                            UserName = "patient@medcenter.babaka.page"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa7c5b15-2800-4d24-9671-1ce15262729b"),
                            ConcurrencyStamp = "aa7c5b15-2800-4d24-9671-1ce15262729b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("5a306a1d-567c-4a76-8d66-524ed18449e7"),
                            ConcurrencyStamp = "5a306a1d-567c-4a76-8d66-524ed18449e7",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3d9e92e1-0b80-4313-bee2-19eb245fbf45"),
                            RoleId = new Guid("aa7c5b15-2800-4d24-9671-1ce15262729b")
                        },
                        new
                        {
                            UserId = new Guid("61f47dc6-6f69-43d7-94d0-3ba0eaf8cef3"),
                            RoleId = new Guid("5a306a1d-567c-4a76-8d66-524ed18449e7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Comment", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatientComments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Diagnosis", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("MedRecord")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.User", b =>
                {
                    b.Navigation("DoctorAppointments");

                    b.Navigation("DoctorComments");

                    b.Navigation("MedRecord");

                    b.Navigation("PatientAppointments");

                    b.Navigation("PatientComments");
                });
#pragma warning restore 612, 618
        }
    }
}
