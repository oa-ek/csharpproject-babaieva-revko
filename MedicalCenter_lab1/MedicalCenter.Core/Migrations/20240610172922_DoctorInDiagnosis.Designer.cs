// <auto-generated />
using System;
using MedicalCenter.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenter.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240610172922_DoctorInDiagnosis")]
    partial class DoctorInDiagnosis
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCenter.Core.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9423af2-c605-4264-a039-e848b55b96df"),
                            DateTime = new DateTime(2024, 6, 11, 20, 29, 21, 313, DateTimeKind.Local).AddTicks(8010),
                            DoctorId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            PatientId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            Type = "Проходження медогляду"
                        },
                        new
                        {
                            Id = new Guid("7cdc9cfa-9900-4fca-acf8-81df347bc377"),
                            DateTime = new DateTime(2024, 6, 12, 20, 29, 21, 313, DateTimeKind.Local).AddTicks(8126),
                            DoctorId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            PatientId = new Guid("8ad50974-05c5-4f5e-aed4-065d7a04a1c3"),
                            Type = "Біль у горлі"
                        },
                        new
                        {
                            Id = new Guid("0e12631b-2108-4df2-9ea1-8ed0bc0a9e11"),
                            DateTime = new DateTime(2024, 6, 11, 1, 29, 21, 313, DateTimeKind.Local).AddTicks(8145),
                            DoctorId = new Guid("5aecbc3c-641d-401e-b337-28f78b2f18dc"),
                            PatientId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            Type = "Виписка з лікарняного"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de2febd2-3e55-4f69-b1f9-3051ecf10860"),
                            CreatedOn = new DateTime(2024, 6, 10, 20, 29, 21, 313, DateTimeKind.Local).AddTicks(8483),
                            DoctorId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            MainText = "Чудова лікарка, виписала направлення на безкоштовні аналізи, експіріенс десять з десяти",
                            PatientId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            Title = "Все супер"
                        },
                        new
                        {
                            Id = new Guid("bc963092-dd8f-4900-9a00-1eaea905d4fe"),
                            CreatedOn = new DateTime(2024, 6, 10, 20, 29, 21, 313, DateTimeKind.Local).AddTicks(8538),
                            DoctorId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            MainText = "Жахливе ставлення, відмовила приймати мене без черги, а мені було просто спитать",
                            PatientId = new Guid("8ad50974-05c5-4f5e-aed4-065d7a04a1c3"),
                            Title = "Немає слів"
                        },
                        new
                        {
                            Id = new Guid("8fa1421a-659c-4e76-a61e-80f9f4b15051"),
                            CreatedOn = new DateTime(2024, 6, 10, 20, 29, 21, 313, DateTimeKind.Local).AddTicks(8560),
                            DoctorId = new Guid("5aecbc3c-641d-401e-b337-28f78b2f18dc"),
                            MainText = "Назва коментаря вже все сказала за мене",
                            PatientId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            Title = "Найкраща сімейна лікарка"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Perscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnosis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0f0c7f1-7f0f-49d4-b1ae-5fe3ea2b491d"),
                            Date = new DateOnly(2023, 4, 29),
                            DoctorId = new Guid("5aecbc3c-641d-401e-b337-28f78b2f18dc"),
                            PatientId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            Perscription = "Чай з малиною 4 р. на день, постільний режим",
                            diagnosis = "Гострий бронхіт"
                        },
                        new
                        {
                            Id = new Guid("e7954db2-1f66-4343-b7df-4ce2e3d3ba25"),
                            Date = new DateOnly(2023, 8, 18),
                            DoctorId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            PatientId = new Guid("8ad50974-05c5-4f5e-aed4-065d7a04a1c3"),
                            Perscription = "Чай з малиною 4 р. на день, постільний режим",
                            diagnosis = "Ларингіт"
                        },
                        new
                        {
                            Id = new Guid("70a8a97e-f663-4165-8f6d-7122b3b75fc2"),
                            Date = new DateOnly(2024, 5, 8),
                            DoctorId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            PatientId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            Perscription = "Адаптол 1 таб. 2 р. на день, Гліцисед 1 таб. 3 р. на день, сон мінімум 10 годин на день",
                            diagnosis = "Нервовий зрив"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            AccessFailedCount = 0,
                            Address = "Somewhere st, Ukraine",
                            Age = 28,
                            ConcurrencyStamp = "4f34a199-f967-4ec7-af78-94ec304a1432",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            Email = "doctor@medcenter.babaka.page",
                            EmailConfirmed = true,
                            FullName = "Бабаєва Вікторія Вікторівна",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@MEDCENTER.BABAKA.PAGE",
                            NormalizedUserName = "DOCTOR@MEDCENTER.BABAKA.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAECxodPzO+IaMR65h+B7vX1N4VXhwSxvt5GBQktB4aLxoNlNgUlMIRisbR0+3i68JSg==",
                            PhoneNumber = "0999997890",
                            PhoneNumberConfirmed = false,
                            Photo = "/images/cracked raiden shogun.jpg",
                            SecurityStamp = "33bcaa8b-4b7e-42b8-9ddd-f6ef8d89ac1e",
                            TwoFactorEnabled = false,
                            UserName = "doctor@medcenter.babaka.page"
                        },
                        new
                        {
                            Id = new Guid("5aecbc3c-641d-401e-b337-28f78b2f18dc"),
                            AccessFailedCount = 0,
                            Address = "SomewhereElse st, Ukraine",
                            Age = 25,
                            ConcurrencyStamp = "ad26afd4-5b6d-4e75-86af-abd656c1489a",
                            DateOfBirth = new DateOnly(1998, 6, 21),
                            Email = "doctor@medcenter.kin.page",
                            EmailConfirmed = true,
                            FullName = "Коновал Анастасія Андріївна",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@MEDCENTER.KIN.PAGE",
                            NormalizedUserName = "DOCTOR@MEDCENTER.KIN.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAECcua1pWAdGXB+hNj3qW229VOoTkIuFA3BhYwX5f8ErUH7Du+NpuwCWhR7TaYdGUdw==",
                            PhoneNumber = "0966665432",
                            PhoneNumberConfirmed = false,
                            Photo = "/images/cracked yae miko.jpg",
                            SecurityStamp = "73ecb144-c0fc-413b-b91e-202880213b81",
                            TwoFactorEnabled = false,
                            UserName = "doctor@medcenter.kin.page"
                        },
                        new
                        {
                            Id = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            AccessFailedCount = 0,
                            Address = "Somewhere st, Ukraine",
                            Age = 28,
                            ConcurrencyStamp = "fe3b4f7e-9588-4940-bbe9-70e0d57e0f6b",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            Email = "patient@medcenter.babaka.page",
                            EmailConfirmed = true,
                            FullName = "Бабаєв Віктор Вікторієвич",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@MEDCENTER.BABAKA.PAGE",
                            NormalizedUserName = "PATIENT@MEDCENTER.BABAKA.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHOjTCOsXLatJKNuU4vmmn57Rca98ejAE/KgahHao6D7hKKOPNfJ1wJ/hvMdpgU2Xw==",
                            PhoneNumber = "0988885340",
                            PhoneNumberConfirmed = false,
                            Photo = "/images/Viktor.jpg",
                            SecurityStamp = "7379dca6-6035-4883-8e1d-a5a70747e119",
                            TwoFactorEnabled = false,
                            UserName = "patient@medcenter.babaka.page"
                        },
                        new
                        {
                            Id = new Guid("8ad50974-05c5-4f5e-aed4-065d7a04a1c3"),
                            AccessFailedCount = 0,
                            Address = "SomewhereElse st, Ukraine",
                            Age = 25,
                            ConcurrencyStamp = "55087db3-faa8-4540-acbb-4e11b9909ef0",
                            DateOfBirth = new DateOnly(1998, 6, 21),
                            Email = "patient@medcenter.kin.page",
                            EmailConfirmed = true,
                            FullName = "Коновал Андрій Анастасійович",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@MEDCENTER.KIN.PAGE",
                            NormalizedUserName = "PATIENT@MEDCENTER.KIN.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEKh7Qw8REglFqWkhoa/QJ3T/ux0V6F1sTILhn0JbaD8PzZvAh2wGKDa8uhLE1WdFpA==",
                            PhoneNumber = "0958880540",
                            PhoneNumberConfirmed = false,
                            Photo = "/images/Andriy.jpg",
                            SecurityStamp = "adc12634-81d3-43a0-bbe1-339d21bf6229",
                            TwoFactorEnabled = false,
                            UserName = "patient@medcenter.kin.page"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("74e2a366-df71-4512-bb15-e8a89be4efb0"),
                            ConcurrencyStamp = "74e2a366-df71-4512-bb15-e8a89be4efb0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3960e876-9cd4-4e01-87bd-f16acd4d011c"),
                            ConcurrencyStamp = "3960e876-9cd4-4e01-87bd-f16acd4d011c",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("db7da560-149f-485d-97fd-ec65542e633b"),
                            ConcurrencyStamp = "db7da560-149f-485d-97fd-ec65542e633b",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            RoleId = new Guid("3960e876-9cd4-4e01-87bd-f16acd4d011c")
                        },
                        new
                        {
                            UserId = new Guid("d9a5d6b6-b002-4e1a-923e-e1012a9f0642"),
                            RoleId = new Guid("74e2a366-df71-4512-bb15-e8a89be4efb0")
                        },
                        new
                        {
                            UserId = new Guid("5aecbc3c-641d-401e-b337-28f78b2f18dc"),
                            RoleId = new Guid("3960e876-9cd4-4e01-87bd-f16acd4d011c")
                        },
                        new
                        {
                            UserId = new Guid("cfdcbec0-c385-457d-b612-11f57d43fef1"),
                            RoleId = new Guid("db7da560-149f-485d-97fd-ec65542e633b")
                        },
                        new
                        {
                            UserId = new Guid("8ad50974-05c5-4f5e-aed4-065d7a04a1c3"),
                            RoleId = new Guid("db7da560-149f-485d-97fd-ec65542e633b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Comment", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatientComments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Diagnosis", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DocMedRecord")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatMedRecord")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.User", b =>
                {
                    b.Navigation("DocMedRecord");

                    b.Navigation("DoctorAppointments");

                    b.Navigation("DoctorComments");

                    b.Navigation("PatMedRecord");

                    b.Navigation("PatientAppointments");

                    b.Navigation("PatientComments");
                });
#pragma warning restore 612, 618
        }
    }
}
