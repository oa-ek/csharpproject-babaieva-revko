// <auto-generated />
using System;
using MedicalCenter.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenter.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240515214359_Seed3")]
    partial class Seed3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalCenter.Core.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2a7ee8e-78cb-49f9-b9c7-993643f8a1f1"),
                            DateTime = new DateTime(2024, 5, 17, 0, 43, 58, 246, DateTimeKind.Local).AddTicks(6219),
                            DoctorId = new Guid("46d4ea5d-a17e-43b4-b1f9-8e371cee7f71"),
                            PatientId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            Type = "Проходження медогляду"
                        },
                        new
                        {
                            Id = new Guid("d84d5411-2d2f-4782-a9e4-17fcd806e8cd"),
                            DateTime = new DateTime(2024, 5, 18, 0, 43, 58, 246, DateTimeKind.Local).AddTicks(6358),
                            DoctorId = new Guid("46d4ea5d-a17e-43b4-b1f9-8e371cee7f71"),
                            PatientId = new Guid("73ec8fa5-7d1e-4d05-8d94-fb08c1d7e113"),
                            Type = "Біль у горлі"
                        },
                        new
                        {
                            Id = new Guid("7465435d-0cad-456e-bcd2-0b713ab0c101"),
                            DateTime = new DateTime(2024, 5, 16, 5, 43, 58, 246, DateTimeKind.Local).AddTicks(6370),
                            DoctorId = new Guid("1fd3e1c1-ccd3-4ceb-ab32-1f2be0073d90"),
                            PatientId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            Type = "Виписка з лікарняного"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e47c25c5-48e5-4434-894f-b8893245c14b"),
                            CreatedOn = new DateTime(2024, 5, 16, 0, 43, 58, 246, DateTimeKind.Local).AddTicks(6564),
                            DoctorId = new Guid("46d4ea5d-a17e-43b4-b1f9-8e371cee7f71"),
                            MainText = "Чудова лікарка, виписала направлення на безкоштовні аналізи, експіріенс десять з десяти",
                            PatientId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            Title = "Все супер"
                        },
                        new
                        {
                            Id = new Guid("99b1657a-c286-40de-a618-a72a99035222"),
                            CreatedOn = new DateTime(2024, 5, 16, 0, 43, 58, 246, DateTimeKind.Local).AddTicks(6642),
                            DoctorId = new Guid("46d4ea5d-a17e-43b4-b1f9-8e371cee7f71"),
                            MainText = "Жахливе ставлення, відмовила приймати мене без черги, а мені було просто спитать",
                            PatientId = new Guid("73ec8fa5-7d1e-4d05-8d94-fb08c1d7e113"),
                            Title = "Немає слів"
                        },
                        new
                        {
                            Id = new Guid("8ac8d060-cf35-4bcd-b56f-bd365bfa59d7"),
                            CreatedOn = new DateTime(2024, 5, 16, 0, 43, 58, 246, DateTimeKind.Local).AddTicks(6670),
                            DoctorId = new Guid("1fd3e1c1-ccd3-4ceb-ab32-1f2be0073d90"),
                            MainText = "Назва коментаря вже все сказала за мене",
                            PatientId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            Title = "Найкраща сімейна лікарка"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Perscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnosis");

                    b.HasData(
                        new
                        {
                            Id = new Guid("478258e2-bb5d-4735-878e-4b0b9a25b442"),
                            Date = new DateOnly(2023, 4, 29),
                            PatientId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            Perscription = "Чай з малиною 4 р. на день, постільний режим",
                            diagnosis = "Гострий бронхіт"
                        },
                        new
                        {
                            Id = new Guid("ff9d34cb-c63f-4921-b806-1ab146e09382"),
                            Date = new DateOnly(2023, 8, 18),
                            PatientId = new Guid("73ec8fa5-7d1e-4d05-8d94-fb08c1d7e113"),
                            Perscription = "Чай з малиною 4 р. на день, постільний режим",
                            diagnosis = "Ларингіт"
                        },
                        new
                        {
                            Id = new Guid("2a04a9dc-1b1a-4b5d-bcb7-bb0f9cb1f594"),
                            Date = new DateOnly(2024, 5, 8),
                            PatientId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            Perscription = "Адаптол 1 таб. 2 р. на день, Гліцисед 1 таб. 3 р. на день, сон мінімум 10 годин на день",
                            diagnosis = "Нервовий зрив"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("46d4ea5d-a17e-43b4-b1f9-8e371cee7f71"),
                            AccessFailedCount = 0,
                            Address = "Somewhere st, Ukraine",
                            Age = 28,
                            ConcurrencyStamp = "5b1393b3-65cc-449f-a146-18912aa3db9c",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            Email = "doctor@medcenter.babaka.page",
                            EmailConfirmed = true,
                            FullName = "Бабаєва Вікторія Вікторівна",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@MEDCENTER.BABAKA.PAGE",
                            NormalizedUserName = "DOCTOR@MEDCENTER.BABAKA.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAENx07nw75V3BNhrph3wxi8S247D4kI1iZ6lZh8wXFWiYDFspYniOQ2oPZL2wg1WraA==",
                            PhoneNumberConfirmed = false,
                            Photo = "/Entities/images/cracked raiden shogun.jpg",
                            SecurityStamp = "2ee58bd8-aeef-4de2-bbcb-6d55eb290ad7",
                            TwoFactorEnabled = false,
                            UserName = "doctor@medcenter.babaka.page"
                        },
                        new
                        {
                            Id = new Guid("1fd3e1c1-ccd3-4ceb-ab32-1f2be0073d90"),
                            AccessFailedCount = 0,
                            Address = "SomewhereElse st, Ukraine",
                            Age = 25,
                            ConcurrencyStamp = "35e4bd12-07ff-4dd9-9c04-b4feaa9dfcfc",
                            DateOfBirth = new DateOnly(1998, 6, 21),
                            Email = "doctor@medcenter.kin.page",
                            EmailConfirmed = true,
                            FullName = "Коновал Анастасія Андріївна",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@MEDCENTER.KIN.PAGE",
                            NormalizedUserName = "DOCTOR@MEDCENTER.KIN.PAGE",
                            PhoneNumberConfirmed = false,
                            Photo = "/Entities/images/cracked yae miko.jpg",
                            SecurityStamp = "0d015e08-23b7-4b4d-9010-0cb3d3fa42a1",
                            TwoFactorEnabled = false,
                            UserName = "doctor@medcenter.kin.page"
                        },
                        new
                        {
                            Id = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            AccessFailedCount = 0,
                            Address = "Somewhere st, Ukraine",
                            Age = 28,
                            ConcurrencyStamp = "1330b791-bdf6-479b-baf1-b28dfa243709",
                            DateOfBirth = new DateOnly(1995, 6, 21),
                            Email = "patient@medcenter.babaka.page",
                            EmailConfirmed = true,
                            FullName = "Бабаєв Віктор Вікторієвич",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@MEDCENTER.BABAKA.PAGE",
                            NormalizedUserName = "PATIENT@MEDCENTER.BABAKA.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuc5tqb8s3/9TSNJpDfffZCvXUKWnoHYeGov+ARfY93d1UPZ6BUo8Lj5cxhv2XblA==",
                            PhoneNumberConfirmed = false,
                            Photo = "/Entities/images/Viktor.jpg",
                            SecurityStamp = "d5e21faf-2359-4b99-b6c2-4d3c723db004",
                            TwoFactorEnabled = false,
                            UserName = "patient@medcenter.babaka.page"
                        },
                        new
                        {
                            Id = new Guid("73ec8fa5-7d1e-4d05-8d94-fb08c1d7e113"),
                            AccessFailedCount = 0,
                            Address = "SomewhereElse st, Ukraine",
                            Age = 25,
                            ConcurrencyStamp = "9ced1b99-b853-42cd-9e93-35585d17efc9",
                            DateOfBirth = new DateOnly(1998, 6, 21),
                            Email = "patient@medcenter.kin.page",
                            EmailConfirmed = true,
                            FullName = "Коновал Андрій Анастасійович",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@MEDCENTER.KIN.PAGE",
                            NormalizedUserName = "PATIENT@MEDCENTER.KIN.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEIlRkDG4IjFxvfBV1UXrj98qIZumA72ZJ1KwNkFKXShkwizyhe4v9WTLFssVNermnQ==",
                            PhoneNumberConfirmed = false,
                            Photo = "/Entities/images/Andriy.jpg",
                            SecurityStamp = "69c7bfad-0399-48e2-a2f6-eec3e883efbc",
                            TwoFactorEnabled = false,
                            UserName = "patient@medcenter.kin.page"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2ca9abf-f933-414b-aed0-02b6abb4271b"),
                            ConcurrencyStamp = "d2ca9abf-f933-414b-aed0-02b6abb4271b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("ab3be527-444f-4c5d-913e-45a7f30c2a64"),
                            ConcurrencyStamp = "ab3be527-444f-4c5d-913e-45a7f30c2a64",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("46d4ea5d-a17e-43b4-b1f9-8e371cee7f71"),
                            RoleId = new Guid("d2ca9abf-f933-414b-aed0-02b6abb4271b")
                        },
                        new
                        {
                            UserId = new Guid("1fd3e1c1-ccd3-4ceb-ab32-1f2be0073d90"),
                            RoleId = new Guid("d2ca9abf-f933-414b-aed0-02b6abb4271b")
                        },
                        new
                        {
                            UserId = new Guid("e9511a86-b644-4748-bfb2-f3feb796f4a9"),
                            RoleId = new Guid("ab3be527-444f-4c5d-913e-45a7f30c2a64")
                        },
                        new
                        {
                            UserId = new Guid("73ec8fa5-7d1e-4d05-8d94-fb08c1d7e113"),
                            RoleId = new Guid("ab3be527-444f-4c5d-913e-45a7f30c2a64")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Comment", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Doctor")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("PatientComments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.Diagnosis", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", "Patient")
                        .WithMany("MedRecord")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MedicalCenter.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenter.Core.Entities.User", b =>
                {
                    b.Navigation("DoctorAppointments");

                    b.Navigation("DoctorComments");

                    b.Navigation("MedRecord");

                    b.Navigation("PatientAppointments");

                    b.Navigation("PatientComments");
                });
#pragma warning restore 612, 618
        }
    }
}
